//
// Copyright (C) 2014 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//
// To sync with upstream:
//

//  # Update.
//  git remote add toybox https://github.com/landley/toybox.git
//  git fetch toybox
//  git merge toybox/master

//  # Regenerate generated files.
//  NOBUILD=1 scripts/make.sh

//  # Make any necessary Android.bp changes and rebuild.
//  mm -j32

//  # Run tests.
//  ./run-tests-on-android.sh
//  # Run a single test.
//  ./run-tests-on-android.sh wc

//  # Upload changes.
//  git commit -a --amend
//  git push aosp HEAD:refs/for/master  # Push to gerrit for review.
//  git push aosp HEAD:master  # Push directly, avoiding gerrit.

//
// To add a toy:
//

//  Edit .config to enable the toy you want to add.
//  make clean && make  # Regenerate the generated files.
//  # Edit `srcs` below to add the toy.
//  # If you just want to use it as "toybox x" rather than "x", you can stop now.
//  # If you want this toy to have a symbolic link in /system/bin, add the toy to symlinks.

cc_defaults {
    name: "toybox-defaults",
    srcs: [
        "lib/args.c",
        "lib/commas.c",
        "lib/dirtree.c",
        "lib/help.c",
        "lib/lib.c",
        "lib/linestack.c",
        "lib/llist.c",
        "lib/net.c",
        "lib/portability.c",
        "lib/tty.c",
        "lib/xwrap.c",
        "main.c",
	"toys/pending/vi.c",
    ],

    cflags: [
        "-std=gnu11",
        "-Os",
        "-Wall",
        "-Werror",
        "-Wno-unused-function",
        "-Wno-char-subscripts",
        "-Wno-deprecated-declarations",
        "-Wno-missing-field-initializers",
        "-Wno-pointer-arith",
        "-Wno-sign-compare",
        "-Wno-string-plus-int",
        "-Wno-unused-parameter",
        "-funsigned-char",
        "-ffunction-sections",
        "-fdata-sections",
        "-fno-asynchronous-unwind-tables",
        "-DTOYBOX_VENDOR=\"-android\"",
    ],

    // This doesn't actually prevent us from dragging in libc++ at runtime
    // because libnetd_client.so is C++.
    stl: "none",

    // not usable on Android?: freeramdisk fsfreeze makedevs nbd-client
    //                         partprobe pivot_root pwdx rev rfkill vconfig
    // currently prefer external/efs2progs: blkid chattr lsattr
    // currently prefer external/iputils: ping ping6
    target: {
        android: {
            symlinks: [
                "vi",
            ],
        },
    },
}

toybox_libraries = [
    "liblog",
    "libselinux",
    // libcutils dependency is needed only for <cutils/sched_policy.h>
    // inclusion from lib/portability.h. When it's changed to include
    // <processgroup/sched_policy.h> this dependency should be dropped
    "libcutils",
    "libprocessgroup",
    "libcrypto",
    "libz",
]

//###########################################
// toybox for /system, /vendor, and /recovery
//###########################################

cc_binary {
    name: "toybox",
    defaults: ["toybox-defaults"],
    host_supported: true,
    recovery_available: true,
    shared_libs: toybox_libraries,
    target: {
        darwin: {
            enabled: false,
        },
    },
}

cc_binary {
    name: "toybox_vendor",
    defaults: ["toybox-defaults"],
    shared_libs: toybox_libraries,
    vendor: true,
}
